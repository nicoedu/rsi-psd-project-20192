#
# Copyright Â© 2016-2019 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: thingsboard
spec:
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: zookeeper:3.5
        ports:
        - containerPort: 2181
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 2181
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 2181
        env:
        - name: ZOO_MY_ID
          value: "1"
        - name: ZOO_SERVERS
          value: "server.1=0.0.0.0:2888:3888;0.0.0.0:2181"
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: zookeeper
  ports:
  - name: zk-port
    port: 2181
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-kafka
  namespace: thingsboard
spec:
  selector:
    matchLabels:
      app: tb-kafka
  template:
    metadata:
      labels:
        app: tb-kafka
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: wurstmeister/kafka:2.12-2.2.1
        ports:
        - containerPort: 9092
        readinessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 9092
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 9092
        env:
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_LISTENERS
          value: "INSIDE://:9093,OUTSIDE://:9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "INSIDE://:9093,OUTSIDE://tb-kafka:9092,PLAINTEXT://kafka:29092"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INSIDE"
        - name: KAFKA_CREATE_TOPICS
          value: "js.eval.requests:100:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600,tb.transport.api.requests:30:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600,tb.rule-engine:30:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "false"
        - name: KAFKA_LOG_RETENTION_BYTES
          value: "1073741824"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "268435456"
        - name: KAFKA_LOG_RETENTION_MS
          value: "300000"
        - name: KAFKA_LOG_CLEANUP_POLICY
          value: "delete"
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-kafka
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-kafka
  ports:
  - name: tb-kafka-port
    port: 9092
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-redis
  namespace: thingsboard
spec:
  selector:
    matchLabels:
      app: tb-redis
  template:
    metadata:
      labels:
        app: tb-redis
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: redis:4.0
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
      volumes:
      - name: redis-data
        emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-redis
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-redis
  ports:
  - name: tb-redis-port
    port: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-js-executor
  namespace: thingsboard
spec:
  replicas: 20
  selector:
    matchLabels:
      app: tb-js-executor
  template:
    metadata:
      labels:
        app: tb-js-executor
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-js-executor:latest
        env:
        - name: REMOTE_JS_EVAL_REQUEST_TOPIC
          value: "js.eval.requests"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        - name: LOGGER_LEVEL
          value: "info"
        - name: LOG_FOLDER
          value: "logs"
        - name: LOGGER_FILENAME
          value: "tb-js-executor-%DATE%.log"
        - name: DOCKER_MODE
          value: "true"
        - name: SCRIPT_BODY_TRACE_FREQUENCY
          value: "1000"
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-node
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-node
  template:
    metadata:
      labels:
        app: tb-node
    spec:
      volumes:
        - name: tb-node-config
          configMap:
            name: tb-node-config
            items:
            - key: conf
              path:  thingsboard.conf
            - key: logback
              path:  logback.xml
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-node:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9001
          name: rpc
        env:
        - name: RPC_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CLUSTER_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_HOST
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ZOOKEEPER_ENABLED
          value: "true"
        - name: ZOOKEEPER_URL
          value: "zookeeper:2181"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        - name: JS_EVALUATOR
          value: "remote"
        - name: TRANSPORT_TYPE
          value: "remote"
        - name: CACHE_TYPE
          value: "redis"
        - name: REDIS_HOST
          value: "tb-redis"
        - name: HTTP_LOG_CONTROLLER_ERROR_STACK_TRACE
          value: "false"
        envFrom:
        - configMapRef:
            name: tb-node-db-config
        volumeMounts:
          - mountPath: /config
            name: tb-node-config
        livenessProbe:
          httpGet:
            path: /login
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 10
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-node
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-node
  ports:
  - port: 8080
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-mqtt-transport
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-mqtt-transport
  template:
    metadata:
      labels:
        app: tb-mqtt-transport
    spec:
      volumes:
        - name: tb-mqtt-transport-config
          configMap:
            name: tb-mqtt-transport-config
            items:
            - key: conf
              path:  tb-mqtt-transport.conf
            - key: logback
              path:  logback.xml
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-mqtt-transport:latest
        ports:
        - containerPort: 1883
          name: mqtt
        env:
        - name: CLUSTER_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_HOST
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MQTT_BIND_ADDRESS
          value: "0.0.0.0"
        - name: MQTT_BIND_PORT
          value: "1883"
        - name: MQTT_TIMEOUT
          value: "10000"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        volumeMounts:
          - mountPath: /config
            name: tb-mqtt-transport-config
        readinessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 1883
        livenessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 1883
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-mqtt-transport
  namespace: thingsboard
spec:
  type: LoadBalancer
  selector:
    app: tb-mqtt-transport
  ports:
  - port: 1883
    targetPort: 1883
    name: mqtt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-http-transport
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-http-transport
  template:
    metadata:
      labels:
        app: tb-http-transport
    spec:
      volumes:
        - name: tb-http-transport-config
          configMap:
            name: tb-http-transport-config
            items:
            - key: conf
              path:  tb-http-transport.conf
            - key: logback
              path:  logback.xml
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-http-transport:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: CLUSTER_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_HOST
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: HTTP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: HTTP_BIND_PORT
          value: "8080"
        - name: HTTP_REQUEST_TIMEOUT
          value: "60000"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        volumeMounts:
          - mountPath: /config
            name: tb-http-transport-config
        readinessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 8080
        livenessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-http-transport
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-http-transport
  ports:
  - port: 8080
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-coap-transport
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-coap-transport
  template:
    metadata:
      labels:
        app: tb-coap-transport
    spec:
      volumes:
        - name: tb-coap-transport-config
          configMap:
            name: tb-coap-transport-config
            items:
            - key: conf
              path:  tb-coap-transport.conf
            - key: logback
              path:  logback.xml
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-coap-transport:latest
        ports:
        - containerPort: 5683
          name: coap
          protocol: UDP
        env:
        - name: CLUSTER_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_HOST
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: COAP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: COAP_BIND_PORT
          value: "5683"
        - name: COAP_TIMEOUT
          value: "10000"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        volumeMounts:
          - mountPath: /config
            name: tb-coap-transport-config
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-coap-transport
  namespace: thingsboard
spec:
  type: LoadBalancer
  selector:
    app: tb-coap-transport
  ports:
  - port: 5683
    name: coap
    protocol: UDP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-web-ui
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-web-ui
  template:
    metadata:
      labels:
        app: tb-web-ui
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-web-ui:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: HTTP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: HTTP_BIND_PORT
          value: "8080"
        - name: TB_ENABLE_PROXY
          value: "false"
        - name: LOGGER_LEVEL
          value: "info"
        - name: LOG_FOLDER
          value: "logs"
        - name: LOGGER_FILENAME
          value: "tb-web-ui-%DATE%.log"
        - name: DOCKER_MODE
          value: "true"
        livenessProbe:
          httpGet:
            path: /index.html
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 10
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-web-ui
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-web-ui
  ports:
  - port: 8080
    name: http
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: tb-ingress
  namespace: thingsboard
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
spec:
  rules:
  - http:
      paths:
      - path: /api/v1/.*
        backend:
          serviceName: tb-http-transport
          servicePort: 8080
      - path: /static/rulenode/.*
        backend:
          serviceName: tb-node
          servicePort: 8080
      - path: /static/.*
        backend:
          serviceName: tb-web-ui
          servicePort: 8080
      - path: /index.html.*
        backend:
          serviceName: tb-web-ui
          servicePort: 8080
      - path: /
        backend:
          serviceName: tb-web-ui
          servicePort: 8080
      - path: /.*
        backend:
          serviceName: tb-node
          servicePort: 8080
---